// Generated by CoffeeScript 1.6.3
window.usage = function() {
  var s;
  return s = "# CoffeeScriptConsole\n\n  * press `shift+enter` to insert new line(s)\n  * press `keyup`/`keydown` to browse through history\n  * use `echo()` instead of `console.log()` to echo\n  * `clearHistory()` clears console history\n  * `clear()` clears screen\n  * `echoEvalOutput(true|false)` echo result of executed code\n\n## Keyboard Shortcuts\n\n  * `cmd+k` clear output screen\n  * `cmd+shift+k` toggle echo eval output";
};

$(window).ready(function() {
  var $consoleDashboard, $iconDark, $input, $output, csc, toggleEchoEvalOutput;
  $consoleDashboard = $("#consoleDashboard");
  $input = $("#consoleInput");
  $output = $("#consoleOutput");
  csc = new CoffeeScriptConsole({
    $input: $input,
    $output: $output,
    suggestions: "usage(),clearHistory(),clearScreen(),echoEvalOutput(true),echo,clear()".split(",")
  });
  window.puts = window.echo = function(output) {
    return csc.echo(output);
  };
  window.clearHistory = function() {
    return csc.clearHistory();
  };
  window.clear = function() {
    window.clearScreen();
    return csc.clearOutputHistory();
  };
  window.clearScreen = function() {
    return csc.$output.html("");
  };
  window.echoEvalOutput = function(trueOrFalse) {
    var $flag;
    if (typeof trueOrFalse === "boolean") {
      $flag = $("#consoleDashboard .echoEvalOutput i");
      if (trueOrFalse) {
        $flag.addClass("icon-eye");
        $flag.removeClass("icon-eye-off");
      } else {
        $flag.addClass("icon-eye-off");
        $flag.removeClass("icon-eye");
      }
      csc.echoEvalOutput = trueOrFalse;
      if (store) {
        return store.set("echoEvalOutput", trueOrFalse);
      }
    }
  };
  if (store) {
    window.echoEvalOutput((typeof store.get("echoEvalOutput") === "boolean" ? store.get("echoEvalOutput") : true));
  }
  window.load = function(url, cb) {
    return $.getScript(url, cb);
  };
  toggleEchoEvalOutput = function() {
    return window.echoEvalOutput(!csc.echoEvalOutput);
  };
  $(document).on("keydown", function(e) {
    $("#consoleInput").focus();
    if ((e.keyCode === 75 && e.metaKey) || (e.keyCode === 75 && e.ctrlKey)) {
      if (e.shiftKey) {
        return toggleEchoEvalOutput();
      } else {
        return window.clear();
      }
    }
  });
  $iconDark = $consoleDashboard.find("i.icon-ajust");
  $iconDark.on("click", function() {
    $("body").toggleClass("dark");
    return store.set("darkColorTheme", $("body").hasClass("dark"));
  });
  $consoleDashboard.find("i.icon-eye, i.icon-eye-off").on("click", function() {
    return toggleEchoEvalOutput();
  });
  if (store) {
    window.echoEvalOutput(store.get("echoEvalOutput"));
    if (store.get("darkColorTheme")) {
      $iconDark.trigger("click");
    }
  }
  $("#consoleOutput .outputResult").live("click", function(e) {
    if ($(e.target).hasClass("attribute") || $(e.target).hasClass("value")) {
      $input.val($(e.target).html());
    } else {
      $input.val($(this).data("outputString"));
    }
    return $input.focus();
  });
  $("#consoleOutput .outputResult").live("dblclick", function(e) {
    $input.val($(this).data("code"));
    return $input.focus();
  });
  return $("#consoleOutput .outputResult i.icon-cancel").live("click", function() {
    var $e;
    $e = $(this).parent();
    csc.removeFromOutputHistory($e.data("position"));
    return $e.remove();
  });
});

/*
//@ sourceMappingURL=browsereditor.map
*/
