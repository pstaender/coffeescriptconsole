// Generated by CoffeeScript 1.6.3
var CoffeeScriptConsole;

CoffeeScriptConsole = (function() {
  CoffeeScriptConsole.prototype.lastCommand = function() {
    return history[history.length] || null;
  };

  CoffeeScriptConsole.prototype.history = [];

  CoffeeScriptConsole.prototype._currentHistoryPosition = null;

  CoffeeScriptConsole.prototype.addToHistory = function(command) {
    command = command != null ? command.trim() : void 0;
    if (command) {
      if (this.history[this.history.length - 1] && this.history[this.history.length - 1] === command) {
        return;
      }
      return this.history.push(command);
    }
  };

  CoffeeScriptConsole.prototype._lastPrompt = '';

  CoffeeScriptConsole.prototype._resultToString = function(output) {
    if (typeof output === 'object' && output !== null) {
      return JSON.stringify(output, null, '  ');
    } else if (output === void 0) {
      return 'undefined';
    } else if (typeof output === 'function') {
      return output.toString();
    } else if (String(output).trim() === '') {
      return '';
    } else {
      return output;
    }
  };

  function CoffeeScriptConsole(options) {
    var attr;
    if (options == null) {
      options = {};
    }
    if (typeof $ === "undefined" || $ === null) {
      throw Error('jQuery is required to use CoffeeScriptConsole');
    }
    if (options.$input == null) {
      options.$input = $('#consoleInput');
    }
    if (options.$output == null) {
      options.$output = $('#consoleOutput');
    }
    for (attr in options) {
      this[attr] = options[attr];
    }
    this.init();
  }

  CoffeeScriptConsole.prototype._keyIsTriggeredManuallay = false;

  CoffeeScriptConsole.prototype.init = function() {
    var $input, $output, self;
    $output = this.$output;
    $input = this.$input;
    self = this;
    $input.on('keyup', function(e) {
      var code, linesCount;
      code = $(this).val();
      if ((e.keyCode === 13 && e.shiftKey) || e.keyCode === 8) {
        linesCount = code.split('\n').length;
        return $input.css('height', linesCount + 'em');
      }
    });
    return $input.on('keydown', function(e) {
      var $e, code, js, output, outputAsString;
      code = $(this).val();
      if (code.trim() !== self._lastPrompt) {
        $(this).removeClass('error');
      }
      if (e.keyCode === 9) {
        e.preventDefault();
        insertAtCursor(this, '  ');
      } else if (e.keyCode === 38) {
        if (self._currentHistoryPosition === 0) {
          return;
        }
        if (self._currentHistoryPosition === null) {
          self._currentHistoryPosition = self.history.length;
        }
        self._currentHistoryPosition--;
        code = self.history[self._currentHistoryPosition];
        $(this).val(code);
      } else if (e.keyCode === 40 && self._currentHistoryPosition >= 0) {
        if (self._currentHistoryPosition === null) {
          self._currentHistoryPosition = self.history.length - 1;
        } else if (self.history.length === (self._currentHistoryPosition + 1)) {
          self._currentHistoryPosition = null;
          $(this).val('');
          return;
        }
        self._currentHistoryPosition++;
        code = self.history[self._currentHistoryPosition] || '';
        $(this).val(code);
        if (!code) {
          self._currentHistoryPosition = null;
          return;
        }
      } else if (e.keyCode === 13 && !e.shiftKey) {
        e.preventDefault();
        $e = $('<pre class="outputResult"></pre>');
        try {
          js = CoffeeScript.compile(code, {
            bare: true
          });
          output = eval.call(window, js);
          $(this).val('');
          if (typeof output === 'function') {
            $e.addClass('function');
          } else if (output === void 0) {
            $e.addClass('undefined');
          } else if (output === null) {
            $e.addClass('null');
          }
          self._currentHistoryPosition = null;
          self.addToHistory(code);
          outputAsString = self._resultToString(output);
          if (outputAsString === '') {
            return;
          }
          $e.text(outputAsString);
          self.onAfterEvaluate(output, $e);
        } catch (_error) {
          e = _error;
          $input.addClass('error');
          $e.text((e != null ? e.message : void 0) || e);
          $e.addClass('error');
          self.onCodeError(e, $e);
        }
        $output.prepend($e);
      }
      return self._lastPrompt = code.trim();
    });
  };

  CoffeeScriptConsole.prototype.onAfterEvaluate = function(output, $e) {
    return setTimeout(function() {
      return $e.addClass('visible');
    }, 200);
  };

  CoffeeScriptConsole.prototype.onCodeError = function(e, $e) {
    return setTimeout(function() {
      return $e.addClass('visible');
    }, 200);
  };

  return CoffeeScriptConsole;

})();

/*
//@ sourceMappingURL=csc.map
*/
