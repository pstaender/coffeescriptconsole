// Generated by CoffeeScript 1.6.3
var CoffeeScriptConsole, exports;

CoffeeScriptConsole = (function() {
  CoffeeScriptConsole.prototype.outputContainer = '<pre class="outputResult"><i class="icon-cancel"></i><span class="data"></span></pre>';

  CoffeeScriptConsole.prototype.echoEvalOutput = true;

  CoffeeScriptConsole.prototype.storeInput = true;

  CoffeeScriptConsole.prototype.storeOutput = true;

  CoffeeScriptConsole.prototype.adjustInputHeightUnit = 'em';

  CoffeeScriptConsole.prototype.storePrefix = 'CoffeeScriptConsole_';

  function CoffeeScriptConsole(options) {
    var $e, attr, i, o, _i, _len, _ref;
    if (options == null) {
      options = {};
    }
    if (typeof $ === "undefined" || $ === null) {
      throw Error('jQuery is required to use CoffeeScriptConsole');
    }
    if (options.$input == null) {
      options.$input = $('#consoleInput');
    }
    if (options.$output == null) {
      options.$output = $('#consoleOutput');
    }
    if (store && this.storeInput) {
      this.history = store.get('CoffeeScriptConsole_history') || [];
    }
    this.suggestions = [];
    for (attr in options) {
      this[attr] = options[attr];
    }
    this.store = window.store || null;
    if (this.store && this.storeOutput) {
      this.outputHistory = this.store.get(this.storePrefix + 'output') || [];
      _ref = this.outputHistory;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        o = _ref[i];
        if (typeof o === 'object' && o) {
          $e = this.echo(o.output, {
            classification: o.classification,
            doStore: false,
            data: {
              position: i,
              code: o.code,
              outputString: o.outputString
            }
          });
        }
      }
    }
    this.init();
  }

  CoffeeScriptConsole.prototype.lastCommand = function() {
    return history[history.length] || null;
  };

  CoffeeScriptConsole.prototype.history = null;

  CoffeeScriptConsole.prototype.suggestions = null;

  CoffeeScriptConsole.prototype._currentHistoryPosition = null;

  CoffeeScriptConsole.prototype.lastPrompt = function() {
    return this.history[this.history.length - 1];
  };

  CoffeeScriptConsole.prototype.addToHistory = function(command) {
    command = command != null ? command.trim() : void 0;
    if (command) {
      if (this.history[this.history.length - 1] && this.history[this.history.length - 1] === command) {
        return;
      }
      this.history.push(command);
    }
    if (this.store && this.storeInput) {
      return this.store.set(this.storePrefix + 'history', this.history);
    }
  };

  CoffeeScriptConsole.prototype.historySuggestionsFor = function(term) {
    var command, history, s, suggestions, _i, _len;
    term = String(term).trim();
    suggestions = [];
    history = [].concat(this.history).reverse().concat(this.suggestions);
    if (term !== '') {
      for (_i = 0, _len = history.length; _i < _len; _i++) {
        command = history[_i];
        s = String(command).trim();
        if (s !== '' && s !== term && s.substring(0, term.length) === term && suggestions.indexOf(s) === -1) {
          suggestions.push(s);
        }
      }
    }
    return suggestions;
  };

  CoffeeScriptConsole.prototype.clearHistory = function() {
    this.clearOutputHistory();
    return this.clearInputHistory();
  };

  CoffeeScriptConsole.prototype.clearInputHistory = function() {
    var _ref;
    this.history = [];
    if (this.storeInput) {
      if ((_ref = this.store) != null) {
        _ref.set(this.storePrefix + 'history', this.history);
      }
      return true;
    } else {
      return false;
    }
  };

  CoffeeScriptConsole.prototype.storeOutputHistory = function() {
    var _ref;
    if (this.storeOutput) {
      return (_ref = this.store) != null ? _ref.set(this.storePrefix + 'output', this.outputHistory) : void 0;
    }
  };

  CoffeeScriptConsole.prototype.removeFromOutputHistory = function(pos) {
    if (this.store && this.storeOutput && this.outputHistory[pos]) {
      delete this.outputHistory[pos];
      return this.storeOutputHistory();
    }
  };

  CoffeeScriptConsole.prototype.clearOutputHistory = function() {
    this.outputHistory = [];
    this.storeOutputHistory();
    if (this.store && this.storeOutput) {
      return true;
    } else {
      return false;
    }
  };

  CoffeeScriptConsole.prototype._lastPrompt = '';

  CoffeeScriptConsole.prototype._objectIsError = function(o) {
    if (o && typeof o.message !== 'undefined') {
      return true;
    } else {
      return false;
    }
  };

  CoffeeScriptConsole.prototype.outputString = function(output) {
    if (typeof output === 'object' && output !== null) {
      return JSON.stringify(output, null, '  ');
    } else {
      return String(output);
    }
  };

  CoffeeScriptConsole.prototype.outputStringFormatted = function(output) {
    if (typeof output === 'object' && output !== null) {
      if (output.constructor === Array) {
        return json2html(output);
      } else if (this._objectIsError(output)) {
        return output.message;
      } else {
        return json2html(output);
      }
    } else if (output === void 0) {
      return 'undefined';
    } else if (typeof output === 'function') {
      return output.toString();
    } else if (String(output).trim() === '') {
      return '';
    } else {
      return output;
    }
  };

  CoffeeScriptConsole.prototype._setCursorToEnd = function(e, $e) {
    e.preventDefault();
    return $e.get(0).setSelectionRange($e.val().length, $e.val().length);
  };

  CoffeeScriptConsole.prototype._setCursorToStart = function(e, $e) {
    var _ref, _ref1;
    e.preventDefault();
    return $e.get(0).setSelectionRange((_ref = $e.val().split('\n')) != null ? _ref[0].length : void 0, (_ref1 = $e.val().split('\n')) != null ? _ref1[0].length : void 0);
  };

  CoffeeScriptConsole.prototype._insertAtCursor = function($e, myValue) {
    var endPos, myField, sel, startPos, temp;
    myField = $e.get(0);
    if (document.selection) {
      temp = void 0;
      myField.focus();
      sel = document.selection.createRange();
      temp = sel.text.length;
      sel.text = myValue;
      if (myValue.length === 0) {
        sel.moveStart("character", myValue.length);
        sel.moveEnd("character", myValue.length);
      } else {
        sel.moveStart("character", -myValue.length + temp);
      }
      return sel.select();
    } else if (myField.selectionStart || myField.selectionStart === 0) {
      startPos = myField.selectionStart;
      endPos = myField.selectionEnd;
      myField.value = myField.value.substring(0, startPos) + myValue + myField.value.substring(endPos, myField.value.length);
      myField.selectionStart = startPos + myValue.length;
      return myField.selectionEnd = startPos + myValue.length;
    } else {
      return myField.value += myValue;
    }
  };

  CoffeeScriptConsole.prototype._adjustTextareaHeight = function($e, lines) {
    if (lines == null) {
      lines = null;
    }
    if (lines === null) {
      lines = $e.val().split('\n').length;
    }
    if (this.adjustInputHeightUnit) {
      return $e.css('height', (lines * 1.5) + this.adjustInputHeightUnit);
    } else {
      return $e.attr('rows', lines);
    }
  };

  CoffeeScriptConsole.prototype._keyIsTriggeredManuallay = false;

  CoffeeScriptConsole.prototype.echo = function(output, options) {
    var $e, $output, attr, cssClass, history, historyData, outputAsString, _ref;
    if (options == null) {
      options = {};
    }
    if (typeof options.doStore !== 'boolean') {
      options.doStore = this.storeOutput;
    }
    $e = $(this.outputContainer);
    if (options.data) {
      for (attr in options.data) {
        $e.data(attr, options.data[attr]);
      }
    }
    $output = this.$output;
    cssClass = '';
    if (typeof options.classification === 'string' && options.classification !== 'evalOutput') {
      cssClass = options.classification;
      $e.addClass(cssClass);
    } else {
      if (options.classification === 'evalOutput' && !this.echoEvalOutput) {
        return $e;
      }
      if (typeof output === 'function') {
        cssClass = 'function';
      } else if (typeof output === 'number') {
        cssClass = 'number';
      } else if (typeof output === 'boolean') {
        cssClass = 'boolean';
      } else if (typeof output === 'string') {
        cssClass = 'string';
      } else if (output === void 0) {
        cssClass = 'undefined';
      } else if (typeof output === 'object') {
        if (this._objectIsError(output)) {
          cssClass = 'error';
        } else if (output === null) {
          cssClass = 'null';
        } else if ((output != null ? output.constructor : void 0) === Array) {
          cssClass = 'array';
        } else {
          cssClass = 'object';
        }
      }
    }
    if (cssClass) {
      $e.addClass(cssClass);
    }
    if (!$e.data('outputString')) {
      $e.data('outputString', this.outputString(output));
    }
    if (this.store && options.doStore) {
      history = this.outputHistory;
      historyData = {
        output: this.outputStringFormatted(output),
        classification: cssClass,
        code: (_ref = options.data) != null ? _ref.code : void 0,
        outputString: $e.data('outputString')
      };
      history.push(historyData);
      store.set(this.storePrefix + 'output', history);
    }
    outputAsString = this.outputStringFormatted(output);
    if (/^\<.+\>/.test(outputAsString)) {
      $e.find('span.data').html(outputAsString);
    } else {
      $e.find('span.data').text(outputAsString);
    }
    $output.prepend($e);
    setTimeout(function() {
      return $e.addClass('visible');
    }, 100);
    return $e;
  };

  CoffeeScriptConsole.prototype.init = function() {
    var $input, $output, self, suggestionFor, suggestionNr;
    $output = this.$output;
    $input = this.$input;
    self = this;
    $input.on('keyup', function(e) {
      var code, cursorPosition, linesCount;
      code = $(this).val();
      cursorPosition = $input.get(0).selectionStart;
      linesCount = code.split('\n').length;
      self._adjustTextareaHeight($input);
      if (e.keyCode === 9 && cursorPosition !== code.length) {
        return self._insertAtCursor($input, '  ');
      }
    });
    suggestionFor = null;
    suggestionNr = 0;
    $input.on('focus', function(e) {
      return self._adjustTextareaHeight($(this));
    });
    return $input.on('keydown', function(e) {
      var code, cursorPosition, linesCount, originalCode, suggestions, _ref, _ref1;
      code = originalCode = $(this).val();
      cursorPosition = $input.get(0).selectionStart;
      linesCount = code.split('\n').length;
      if (code.trim() !== self._lastPrompt) {
        $(this).removeClass('error');
      }
      if (e.keyCode === 9) {
        e.preventDefault();
        if (cursorPosition === code.length) {
          if (suggestionFor === null) {
            suggestionFor = code;
          }
          suggestions = self.historySuggestionsFor(suggestionFor);
          if (suggestions[suggestionNr]) {
            $(this).val(suggestions[suggestionNr]);
            if (suggestionNr + 1 <= suggestions.length) {
              suggestionNr++;
            } else {
              suggestionNr = 0;
              $(this).val('');
            }
          }
        } else {
          suggestionFor = null;
          suggestionNr = 0;
        }
      } else {
        suggestionFor = null;
        suggestionNr = 0;
      }
      if (e.keyCode === 38) {
        if (!(cursorPosition <= ((_ref = originalCode.split("\n")) != null ? (_ref1 = _ref[0]) != null ? _ref1.length : void 0 : void 0))) {
          return;
        }
        if (self._currentHistoryPosition === 0) {
          return;
        }
        if (self._currentHistoryPosition === null) {
          self._currentHistoryPosition = self.history.length;
        }
        self._currentHistoryPosition--;
        code = self.history[self._currentHistoryPosition];
        $(this).val(code);
        self._setCursorToStart(e, $(this));
      } else if (e.keyCode === 40 && self._currentHistoryPosition >= 0) {
        if (!(cursorPosition >= originalCode.split("\n").splice(0, linesCount).join(' ').length)) {
          return;
        }
        if (self._currentHistoryPosition === null) {
          self._currentHistoryPosition = self.history.length - 1;
        } else if (self.history.length === (self._currentHistoryPosition + 1)) {
          self._currentHistoryPosition = null;
          $(this).val('');
          return;
        }
        self._currentHistoryPosition++;
        code = self.history[self._currentHistoryPosition] || '';
        $(this).val(code);
        self._setCursorToEnd(e, $(this));
        if (!code) {
          self._currentHistoryPosition = null;
          return;
        }
      } else if (e.keyCode === 13 && !e.shiftKey) {
        e.preventDefault();
        self.executeCode();
      }
      if (typeof code === 'string') {
        self._lastPrompt = code.trim();
      }
      return self._adjustTextareaHeight($(this));
    });
  };

  CoffeeScriptConsole.prototype.compile = function(code) {
    return CoffeeScript.compile(code, {
      bare: true
    });
  };

  CoffeeScriptConsole.prototype["eval"] = function(code, context) {
    if (context == null) {
      context = window;
    }
    return eval.call(window, code);
  };

  CoffeeScriptConsole.prototype.onBeforeExecutingCode = function(s) {
    var codeEscaped, deferString, functionCall, functionParts, line, lines, match;
    if (typeof s === 'string') {
      s = s.replace(/^\n*(.*)\n*$/, '$1').split('\n').join('\n');
      lines = (function() {
        var _i, _len, _ref, _results;
        _ref = s.split('\n');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          if (line && /^\s*\*[a-zA-Z_$]*[0-9a-zA-Z_$]*\s*\=\s*/.test(line)) {
            codeEscaped = line.replace(/'/g, "\\'");
            match = line.match(/^(\s*)\*([a-zA-Z_$]*[0-9a-zA-Z_$]*)\s*\=\s*(.+)\s*$/);
            functionParts = match[3].match(/^(.*)\(([^\)]*)\)\s*$/);
            deferString = "defer err, " + match[2];
            if (functionParts) {
              functionCall = functionParts[2] ? functionParts[1] + " " + functionParts[2] + ", " + deferString : functionParts[1] + " " + deferString;
            } else {
              functionCall = match[3] + ", " + deferString;
            }
            _results.push(("await " + functionCall + "\nif typeof echo is 'function'\n  echo(err, { classification: \"\#{if err and not " + match[2] + " then \"error \" else \"\"}evalOutput\", data: { error: err?.message, code: '" + codeEscaped + "' } }) if err\n  echo(" + match[2] + ", { classification: \"evalOutput\", data: { code: '" + codeEscaped + "' } })").split('\n').join("\n" + match[1]));
          } else {
            _results.push(line);
          }
        }
        return _results;
      })();
      s = lines.join('\n');
    }
    return s;
  };

  CoffeeScriptConsole.prototype.executeCode = function(code, $input) {
    var $e, e, js, originalCode, output, _ref;
    if (code == null) {
      code = (_ref = this.$input) != null ? _ref.val() : void 0;
    }
    if ($input == null) {
      $input = this.$input;
    }
    code = this.onBeforeExecutingCode(originalCode = code);
    try {
      js = this.compile(code);
      output = this["eval"](js);
      $input.val('');
      this._currentHistoryPosition = null;
      this.addToHistory(originalCode);
      $e = this.echo(output, {
        classification: 'evalOutput',
        data: {
          code: originalCode,
          position: this.outputHistory.length
        }
      });
      if (this.outputStringFormatted(output) === '') {
        return;
      }
      return this.onAfterEvaluate(output, $e);
    } catch (_error) {
      e = _error;
      $input.addClass('error');
      $e = this.echo((e != null ? e.message : void 0) || e, {
         classification: 'error evalOutput',
        data: {
          code: originalCode,
          error: e.message
        }
      });
      return this.onCodeError(e, $e);
    }
  };

  CoffeeScriptConsole.prototype.onAfterEvaluate = function(output, $e) {};

  CoffeeScriptConsole.prototype.onCodeError = function(error, $e) {};

  return CoffeeScriptConsole;

})();

if ((typeof require !== "undefined" && require !== null) && (typeof exports !== "undefined" && exports !== null)) {
  module.exports = exports = CoffeeScriptConsole;
}

/*
//@ sourceMappingURL=csc.map
*/
